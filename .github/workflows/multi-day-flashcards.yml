name: Generate Comprehensive Flashcards

on:
  workflow_dispatch:
    inputs:
      model:
        description: 'AI model to use'
        required: true
        default: 'gpt4o-mini'
      max_requests_per_run:
        description: 'Maximum API requests per run'
        required: true
        default: '140'
    # Add file input for the PDF
    files:
      pdf:
        description: 'PDF file to process'
        required: true

jobs:
  generate-flashcards:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install azure-ai-inference PyMuPDF tqdm

      # Create directories
      - name: Create directories
        run: |
          mkdir -p progress
          mkdir -p pdfs

      # Move uploaded PDF to a known location
      - name: Set up PDF file
        run: |
          # The PDF is available at ${{ github.event.inputs.pdf }}
          cp ${{ github.event.inputs.pdf }} pdfs/input.pdf
          echo "PDF_PATH=pdfs/input.pdf" >> $GITHUB_ENV

      # Check for previous progress
      - name: Check if previous progress exists
        id: check-progress
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const progressArtifact = artifacts.data.artifacts.find(a => a.name === 'flashcard-progress');
            if (progressArtifact) {
              console.log('Previous progress artifact found, will download it');
              return true;
            } else {
              console.log('No previous progress artifact found, starting fresh');
              return false;
            }
          result-encoding: string

      # Only try to download if the artifact exists
      - name: Download previous progress
        if: steps.check-progress.outputs.result == 'true'
        uses: actions/download-artifact@v4
        with:
          name: flashcard-progress
          path: progress

      - name: Set environment variables
        run: |
          echo "MODEL=${{ github.event.inputs.model || 'gpt4o-mini' }}" >> $GITHUB_ENV
          echo "MAX_REQUESTS=${{ github.event.inputs.max_requests_per_run || '140' }}" >> $GITHUB_ENV

      - name: Run incremental flashcard generator
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python incremental_comprehensive_flashcard_generator.py "$PDF_PATH" --model "$MODEL" --max-requests "$MAX_REQUESTS"
          echo "FLASHCARDS_COMPLETED=${FLASHCARDS_COMPLETED}" >> $GITHUB_ENV

      - name: Upload progress as artifact
        uses: actions/upload-artifact@v4
        with:
          name: flashcard-progress
          path: progress/
          retention-days: 7

      - name: Upload completed flashcards if generation is complete
        if: env.FLASHCARDS_COMPLETED == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: completed-flashcards
          path: comprehensive_flashcards/
          retention-days: 30

      # Notification steps remain the same
      - name: Create completion summary
        if: env.FLASHCARDS_COMPLETED == 'true'
        run: |
          echo "### ðŸŽ‰ Flashcard Generation Complete! ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Your comprehensive flashcards are ready to download from the artifacts section." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Details:**" >> $GITHUB_STEP_SUMMARY
          echo "- Model used: $MODEL" >> $GITHUB_STEP_SUMMARY
          echo "- Download the 'completed-flashcards' artifact to access your files" >> $GITHUB_STEP_SUMMARY

      - name: Create notification issue
        if: env.FLASHCARDS_COMPLETED == 'true'
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: ðŸŽ‰ Flashcard Generation Complete!
          content-filepath: ./issue-body.md
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare issue content
        if: env.FLASHCARDS_COMPLETED == 'true'
        run: |
          cat > issue-body.md << EOL
          Your comprehensive flashcards are ready!

          ### Details
          - **Model used**: \`${MODEL}\`
          - **Date completed**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

          ### How to Access Your Flashcards
          1. Go to the Actions tab in this repository
          2. Click on the most recent workflow run
          3. Scroll down to "Artifacts"
          4. Download the "completed-flashcards" file
          5. Extract the ZIP file to access your flashcards in various formats

          The flashcards have been generated with comprehensive coverage of all concepts and components, ensuring all related topics are covered.
          EOL
