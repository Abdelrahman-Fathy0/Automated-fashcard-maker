name: Generate Flashcards

on:
  workflow_dispatch:
    inputs:
      model:
        description: 'AI model to use'
        required: true
        default: 'gpt4o-mini'
      max_requests_per_run:
        description: 'Maximum API requests per run'
        required: true
        default: '140'
      pdf_url:
        description: 'URL to download PDF from'
        required: true
        type: string

jobs:
  generate-flashcards:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install azure-ai-inference PyMuPDF tqdm requests gdown

      - name: Create directories
        run: |
          mkdir -p progress
          mkdir -p pdfs
          mkdir -p scripts

      - name: Download script
        run: |
          curl -o scripts/flashcard_generator.py https://raw.githubusercontent.com/Abdelrahman-Fathy0/Automated-fashcard-maker/main/scripts/flashcard_generator.py || {
            echo "Creating flashcard generator script from scratch..."
            curl -o scripts/flashcard_generator.py https://gist.githubusercontent.com/Abdelrahman-Fathy0/e7ed7a1ea41fa8b7f6d2c7b57e7e93c1/raw/flashcard_generator.py
          }
          chmod +x scripts/flashcard_generator.py

      - name: Download PDF
        run: |
          python -c "
          import requests, re, os, sys
          
          url = '${{ github.event.inputs.pdf_url }}'
          print(f'Original URL: {url}')
          
          # Convert Google Drive link if needed
          if 'drive.google.com' in url:
              file_id = re.search(r'file/d/([^/]+)', url) or re.search(r'id=([^&]+)', url)
              if file_id:
                  download_url = f'https://drive.google.com/uc?export=download&id={file_id.group(1)}'
              else:
                  download_url = url
          elif 'dropbox.com' in url and 'dl=0' in url:
              download_url = url.replace('dl=0', 'dl=1')
          else:
              download_url = url
          
          print(f'Download URL: {download_url}')
          
          try:
              # Download the file
              response = requests.get(download_url, stream=True)
              response.raise_for_status()
              
              with open('pdfs/input.pdf', 'wb') as f:
                  for chunk in response.iter_content(chunk_size=8192): 
                      f.write(chunk)
              
              print(f'PDF downloaded successfully: {os.path.getsize(\"pdfs/input.pdf\")/1024/1024:.2f} MB')
          except Exception as e:
              print(f'Error downloading PDF: {e}')
              sys.exit(1)
          "
          echo "PDF_PATH=pdfs/input.pdf" >> $GITHUB_ENV

      - name: Check for previous progress
        id: check-progress
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const progressArtifact = artifacts.data.artifacts.find(a => a.name === 'flashcard-progress');
            return progressArtifact ? true : false;
          result-encoding: string

      - name: Download previous progress
        if: steps.check-progress.outputs.result == 'true'
        uses: actions/download-artifact@v4
        with:
          name: flashcard-progress
          path: progress

      - name: Generate flashcards
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python scripts/flashcard_generator.py "$PDF_PATH" --model "${{ github.event.inputs.model }}" --max-requests "${{ github.event.inputs.max_requests_per_run }}"
          echo "FLASHCARDS_COMPLETED=${FLASHCARDS_COMPLETED:-false}" >> $GITHUB_ENV

      - name: Upload progress
        uses: actions/upload-artifact@v4
        with:
          name: flashcard-progress
          path: progress/
          retention-days: 7

      - name: Upload completed flashcards
        if: env.FLASHCARDS_COMPLETED == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: completed-flashcards
          path: comprehensive_flashcards/
          retention-days: 30
